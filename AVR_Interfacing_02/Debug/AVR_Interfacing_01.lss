
AVR_Interfacing_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000045c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000076a  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define GET_BIT(Reg,Bitnum)			(  (Reg>>Bitnum) & 1 )



void main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	unsigned char pinValue_0 ;
	unsigned char pinValue_1 ;
	unsigned char pinValue_2 ;

	// set port direction output
	DDRA  = 0b11111111;
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	80 83       	st	Z, r24


	DDRB  = 0b00000001;
  80:	e7 e3       	ldi	r30, 0x37	; 55
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	80 83       	st	Z, r24
	PORTB = 0b00000001;
  88:	e8 e3       	ldi	r30, 0x38	; 56
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 83       	st	Z, r24

	//set portC0 direction input
	//CLR_BIT(DDRC,0);
	DDRC  = 0b00000000;
  90:	e4 e3       	ldi	r30, 0x34	; 52
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1

	// activate pull-up Resistor on pin0
	//SET_BIT(PORTC,0);
	PORTC = 0b00000111;
  96:	e5 e3       	ldi	r30, 0x35	; 53
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	80 83       	st	Z, r24

	//
	unsigned char index = 0;
  9e:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(PORTA,index);
  a0:	ab e3       	ldi	r26, 0x3B	; 59
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	eb e3       	ldi	r30, 0x3B	; 59
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	48 2f       	mov	r20, r24
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	28 2f       	mov	r18, r24
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 2e       	mov	r0, r18
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <main+0x4e>
  c2:	84 2b       	or	r24, r20
  c4:	8c 93       	st	X, r24
//	SET_BIT(PORTB,0);


	while(1)
	{
		pinValue_0 = GET_BIT(PINC,0);
  c6:	e3 e3       	ldi	r30, 0x33	; 51
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	8c 83       	std	Y+4, r24	; 0x04
		pinValue_1 = GET_BIT(PINC,1);
  d0:	e3 e3       	ldi	r30, 0x33	; 51
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	86 95       	lsr	r24
  d8:	81 70       	andi	r24, 0x01	; 1
  da:	8b 83       	std	Y+3, r24	; 0x03
		pinValue_2 = GET_BIT(PINC,2);
  dc:	e3 e3       	ldi	r30, 0x33	; 51
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 95       	lsr	r24
  e4:	86 95       	lsr	r24
  e6:	81 70       	andi	r24, 0x01	; 1
  e8:	8a 83       	std	Y+2, r24	; 0x02

		if(pinValue_0 == 0)
  ea:	8c 81       	ldd	r24, Y+4	; 0x04
  ec:	88 23       	and	r24, r24
  ee:	c9 f5       	brne	.+114    	; 0x162 <main+0xf6>
		{
			CLR_BIT(PORTA, index);
  f0:	ab e3       	ldi	r26, 0x3B	; 59
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	eb e3       	ldi	r30, 0x3B	; 59
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	48 2f       	mov	r20, r24
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 2e       	mov	r0, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0xa2>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <main+0x9e>
 112:	80 95       	com	r24
 114:	84 23       	and	r24, r20
 116:	8c 93       	st	X, r24
			if(index == 0 )	index = 7 ;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	88 23       	and	r24, r24
 11c:	19 f4       	brne	.+6      	; 0x124 <main+0xb8>
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	03 c0       	rjmp	.+6      	; 0x12a <main+0xbe>
			else 			index--	  ;
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	81 50       	subi	r24, 0x01	; 1
 128:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(PORTA, index);
 12a:	ab e3       	ldi	r26, 0x3B	; 59
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	eb e3       	ldi	r30, 0x3B	; 59
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	48 2f       	mov	r20, r24
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	28 2f       	mov	r18, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 2e       	mov	r0, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0xdc>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <main+0xd8>
 14c:	84 2b       	or	r24, r20
 14e:	8c 93       	st	X, r24


			while(GET_BIT(PINC,0)==0);
 150:	e3 e3       	ldi	r30, 0x33	; 51
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	90 70       	andi	r25, 0x00	; 0
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	b9 f3       	breq	.-18     	; 0x150 <main+0xe4>

		}
		if(pinValue_1 == 0)
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	88 23       	and	r24, r24
 166:	e9 f4       	brne	.+58     	; 0x1a2 <main+0x136>
		{
			TOGGLE_BIT(PORTA, index);
 168:	ab e3       	ldi	r26, 0x3B	; 59
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	eb e3       	ldi	r30, 0x3B	; 59
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 2e       	mov	r0, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <main+0x11a>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <main+0x116>
 18a:	84 27       	eor	r24, r20
 18c:	8c 93       	st	X, r24

			while(GET_BIT(PINC,1)==0);
 18e:	e3 e3       	ldi	r30, 0x33	; 51
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	86 95       	lsr	r24
 196:	88 2f       	mov	r24, r24
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	81 70       	andi	r24, 0x01	; 1
 19c:	90 70       	andi	r25, 0x00	; 0
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	b1 f3       	breq	.-20     	; 0x18e <main+0x122>
		}
		if(pinValue_2 == 0)
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	88 23       	and	r24, r24
 1a6:	09 f0       	breq	.+2      	; 0x1aa <main+0x13e>
 1a8:	8e cf       	rjmp	.-228    	; 0xc6 <main+0x5a>
		{
			CLR_BIT(PORTA, index);
 1aa:	ab e3       	ldi	r26, 0x3B	; 59
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	eb e3       	ldi	r30, 0x3B	; 59
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <main+0x15c>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <main+0x158>
 1cc:	80 95       	com	r24
 1ce:	84 23       	and	r24, r20
 1d0:	8c 93       	st	X, r24
			if(index == 7 )	index = 0 ;
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	87 30       	cpi	r24, 0x07	; 7
 1d6:	11 f4       	brne	.+4      	; 0x1dc <main+0x170>
 1d8:	19 82       	std	Y+1, r1	; 0x01
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <main+0x176>
			else			index++	  ;
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(PORTA, index);
 1e2:	ab e3       	ldi	r26, 0x3B	; 59
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	eb e3       	ldi	r30, 0x3B	; 59
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <main+0x194>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <main+0x190>
 204:	84 2b       	or	r24, r20
 206:	8c 93       	st	X, r24

			while(GET_BIT(PINC,2)==0);
 208:	e3 e3       	ldi	r30, 0x33	; 51
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	86 95       	lsr	r24
 210:	86 95       	lsr	r24
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	81 70       	andi	r24, 0x01	; 1
 218:	90 70       	andi	r25, 0x00	; 0
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	a9 f3       	breq	.-22     	; 0x208 <main+0x19c>
 21e:	53 cf       	rjmp	.-346    	; 0xc6 <main+0x5a>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
